import axios from "axios";

const API_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";

const api = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

// Add token to requests if it exists
api.interceptors.request.use((config) => {
  // Only run this in browser environment (not during SSR)
  if (typeof window !== 'undefined') {
    let token = localStorage.getItem("token");
    console.log(
      "Token from localStorage:",
      token ? `${token.substring(0, 15)}...` : "No token"
    );

    if (token) {
      // Clean up token if needed (remove quotes)
      if (token.startsWith('"') && token.endsWith('"')) {
        token = token.slice(1, -1);
        console.log("Cleaned up token by removing quotes");
        localStorage.setItem("token", token); // Save the clean token back
      }

      // Debug token structure
      try {
        const parts = token.split(".");
        if (parts.length !== 3) {
          console.error(
            "Invalid JWT token format. Expected 3 parts, got:",
            parts.length
          );
        } else {
          const header = JSON.parse(atob(parts[0]));
          const payload = JSON.parse(atob(parts[1]));
          console.log("Token header:", header);
          console.log("Token payload:", payload);
          console.log(
            "Token expiration:",
            new Date(payload.exp * 1000).toLocaleString()
          );

          // Check if token is expired
          const now = Math.floor(Date.now() / 1000);
          if (payload.exp < now) {
            console.error(
              "Token is expired! Expired at:",
              new Date(payload.exp * 1000).toLocaleString()
            );
          }
        }
      } catch (e) {
        console.error("Error parsing JWT token:", e);
      }

      // Properly format the Authorization header
      config.headers.Authorization = `Bearer ${token}`;
      console.log("Authorization header:", config.headers.Authorization);
    } else {
      console.warn("No token found in localStorage");
    }
  }
  return config;
});

interface LoginData {
  username: string;
  password: string;
}

interface RegisterData {
  email: string;
  password: string;
  name: string;
}

interface ContentGenerationRequest {
  idea_id: string;
  clip_ids: number[];
  content_type: string;
  tone: string;
  length: string;
}

interface IdeaCreateData {
  name: string;
  category?: string;
  tags?: string[];
}

interface IdeaUpdateData {
  name?: string;
  category?: string;
  tags?: string[];
}

interface ClipCreateData {
  type: string;
  value: string;
  tags?: string[];
  idea_id?: string;
}

interface ClipUpdateData {
  type?: string;
  value?: string;
  tags?: string[];
}

// API methods for authentication
export const auth = {
  login: async (data: LoginData) => {
    console.log("Preparing login request with data:", {
      username: data.username,
    });

    const formData = new URLSearchParams();
    formData.append("username", data.username);
    formData.append("password", data.password);
    formData.append("grant_type", "password");

    try {
      console.log("Sending login request to:", `${API_URL}/auth/login`);
      const response = await api.post("/auth/login", formData, {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
      });
      console.log("Login response received:", response.status);
      return response.data;
    } catch (error) {
      console.error("Login request failed:", error);
      throw error;
    }
  },

  register: async (data: RegisterData) => {
    console.log("Preparing register request with data:", { email: data.email });

    try {
      console.log("Sending register request to:", `${API_URL}/auth/register`);
      const response = await api.post("/auth/register", data);
      console.log("Register response received:", response.status);
      return response.data;
    } catch (error) {
      console.error("Register request failed:", error);
      throw error;
    }
  },
};

// API methods for content generation
export const content = {
  generate: async (data: ContentGenerationRequest) => {
    try {
      console.log("Generating content:", data);
      const response = await api.post("/content/generate", data);
      console.log("Content generation response:", response.data);
      return response.data;
    } catch (error) {
      console.error("Error generating content:", error);
      throw error;
    }
  },
};

// API methods for ideas
export const ideas = {
  getAll: async () => {
    try {
      console.log("Fetching all ideas");
      const response = await api.get("/ideas");
      console.log("Ideas response:", response.data);
      return response.data;
    } catch (error) {
      console.error("Error fetching ideas:", error);
      throw error;
    }
  },
  
  getById: async (id: string) => {
    try {
      console.log(`Fetching idea with ID: ${id}`);
      const response = await api.get(`/ideas/${id}`);
      console.log("Idea details response:", response.data);
      return response.data;
    } catch (error) {
      console.error(`Error fetching idea ${id}:`, error);
      throw error;
    }
  },
  
  create: async (data: IdeaCreateData) => {
    try {
      console.log("Creating new idea:", data);
      const response = await api.post("/ideas", data);
      console.log("Idea creation response:", response.data);
      return response.data;
    } catch (error) {
      console.error("Error creating idea:", error);
      throw error;
    }
  },
  
  update: async (id: string, data: IdeaUpdateData) => {
    try {
      console.log(`Updating idea ${id}:`, data);
      const response = await api.put(`/ideas/${id}`, data);
      console.log("Idea update response:", response.data);
      return response.data;
    } catch (error) {
      console.error(`Error updating idea ${id}:`, error);
      throw error;
    }
  },
  
  delete: async (id: string) => {
    try {
      console.log(`Deleting idea ${id}`);
      const response = await api.delete(`/ideas/${id}`);
      console.log("Idea deletion response:", response.data);
      return response.data;
    } catch (error) {
      console.error(`Error deleting idea ${id}:`, error);
      throw error;
    }
  }
};

// API methods for clips
export const clips = {
  getAll: async () => {
    try {
      console.log("Fetching all clips");
      const response = await api.get("/clips");
      console.log("Clips response:", response.data);
      return response.data;
    } catch (error) {
      console.error("Error fetching clips:", error);
      throw error;
    }
  },
  
  getByIdea: async (ideaId: string) => {
    try {
      console.log(`Fetching clips for idea ${ideaId}`);
      const response = await api.get(`/clips?idea=${ideaId}`);
      console.log(`Clips for idea ${ideaId} response:`, response.data);
      return response.data;
    } catch (error) {
      console.error(`Error fetching clips for idea ${ideaId}:`, error);
      throw error;
    }
  },
  
  getById: async (id: string) => {
    try {
      console.log(`Fetching clip ${id}`);
      const response = await api.get(`/clips/${id}`);
      console.log("Clip response:", response.data);
      return response.data;
    } catch (error) {
      console.error(`Error fetching clip ${id}:`, error);
      throw error;
    }
  },
  
  create: async (ideaId: string, data: ClipCreateData) => {
    try {
      console.log(`Creating clip for idea ${ideaId}:`, data);
      // Add idea ID to clip data
      const clipData = {
        ...data,
        idea_id: ideaId
      };
      const response = await api.post("/clips", clipData);
      console.log("Clip creation response:", response.data);
      return response.data;
    } catch (error) {
      console.error(`Error creating clip for idea ${ideaId}:`, error);
      throw error;
    }
  },
  
  update: async (id: string, data: ClipUpdateData) => {
    try {
      console.log(`Updating clip ${id}:`, data);
      const response = await api.put(`/clips/${id}`, data);
      console.log("Clip update response:", response.data);
      return response.data;
    } catch (error) {
      console.error(`Error updating clip ${id}:`, error);
      throw error;
    }
  },
  
  delete: async (id: string) => {
    try {
      console.log(`Deleting clip ${id}`);
      const response = await api.delete(`/clips/${id}`);
      console.log("Clip deletion response:", response.data);
      return response.data;
    } catch (error) {
      console.error(`Error deleting clip ${id}:`, error);
      throw error;
    }
  }
};

// Export the axios instance for direct use
export default api;
